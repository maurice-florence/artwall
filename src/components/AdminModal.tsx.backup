"use client";

import React, { Suspense } from "react";
import { CATEGORIES, CATEGORY_LABELS } from '@/constants';
import { Artwork } from '@/types';
import styled from 'styled-components';
import { ref as dbRef, get, update, push, set } from "firebase/database";
import Link from 'next/link';
import { db } from "@/firebase";

// Modal backdrop and content
const ModalBackdrop = styled.div`
  position: fixed;
  top: 0; left: 0; right: 0; bottom: 0;
  background: rgba(0,0,0,0.4);
  z-index: 1000;
  display: flex;
  align-items: center;
  justify-content: center;
`;

const ModalContent = styled.div`
  background: #fff;
  border-radius: 12px;
  box-shadow: 0 4px 24px rgba(0,0,0,0.12);
  padding: 2rem 2.5rem 2.5rem 2.5rem;
  max-width: 700px;
  width: 100%;
  max-height: 90vh;
  overflow-y: auto;
  position: relative;
`;

const CloseButton = styled.button`
  position: absolute;
  top: 1rem;
  right: 1rem;
  background: transparent;
  border: none;
  font-size: 2rem;
  color: #E07A5F;
  cursor: pointer;
`;

const FormWrapper = styled.div`
  width: 100%;
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
`;

const FieldGroup = styled.div`
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
`;

const Label = styled.label`
  font-weight: 600;
`;

const SectionTitle = styled.h3`
  font-family: 'Lora', serif;
  color: #E07A5F;
  margin: 1.5rem 0 1rem 0;
  border-bottom: 2px solid #E07A5F;
  padding-bottom: 0.5rem;
`;

const Input = styled.input`
  padding: 0.75rem;
  border: 1px solid #ddd;
  border-radius: 6px;
  font-size: 1rem;
`;

const Textarea = styled.textarea`
  padding: 0.75rem;
  border: 1px solid #ddd;
  border-radius: 6px;
  font-size: 1rem;
  min-height: 100px;
  resize: vertical;
`;

const Select = styled.select`
  padding: 0.75rem;
  border: 1px solid #ddd;
  border-radius: 6px;
  font-size: 1rem;
`;

const Button = styled.button`
  padding: 0.75rem 1.5rem;
  font-weight: 700;
  background: #E07A5F;
  color: #fff;
  border: none;
  border-radius: 6px;
  font-size: 1.1rem;
  cursor: pointer;
  margin-top: 1rem;
  
  &:disabled {
    background: #ccc;
    cursor: not-allowed;
  }
  
  &:hover:not(:disabled) {
    background: #d66a4a;
  }
`;

const ErrorMessage = styled.div`
  color: #e74c3c;
  font-size: 0.9rem;
  margin-top: 0.25rem;
`;

const SuccessMessage = styled.div`
  color: #27ae60;
  font-size: 0.9rem;
  margin-top: 0.25rem;
`;

interface AdminModalProps {
  isOpen: boolean;
  onClose: () => void;
  artworkToEdit?: Artwork | null;
}

const AdminModal: React.FC<AdminModalProps> = ({ isOpen, onClose, artworkToEdit }) => {
  // Basic fields
  const [title, setTitle] = React.useState("");
  const [year, setYear] = React.useState<number | null>(null);
  const [month, setMonth] = React.useState<number | null>(null);
  const [day, setDay] = React.useState<number | null>(null);
  const [category, setCategory] = React.useState<Artwork["category"]>("poem");
  const [description, setDescription] = React.useState("");
  const [content, setContent] = React.useState("");
  const [isHidden, setIsHidden] = React.useState<boolean>(false);
  
  // New fields from Firebase sync
  const [version, setVersion] = React.useState("01");
  const [language, setLanguage] = React.useState("en");
  const [language1, setLanguage1] = React.useState("");
  const [language2, setLanguage2] = React.useState("");
  const [language3, setLanguage3] = React.useState("");
  const [location1, setLocation1] = React.useState("");
  const [location2, setLocation2] = React.useState("");
  const [tags, setTags] = React.useState("");
  const [url1, setUrl1] = React.useState("");
  const [url2, setUrl2] = React.useState("");
  const [url3, setUrl3] = React.useState("");
  
  // Category-specific fields
  const [lyrics, setLyrics] = React.useState("");
  const [chords, setChords] = React.useState("");
  const [soundcloudEmbedUrl, setSoundcloudEmbedUrl] = React.useState("");
  const [soundcloudTrackUrl, setSoundcloudTrackUrl] = React.useState("");
  const [mediaType, setMediaType] = React.useState<string>("text");
  const [coverImageUrl, setCoverImageUrl] = React.useState("");
  const [audioUrl, setAudioUrl] = React.useState("");
  const [pdfUrl, setPdfUrl] = React.useState("");
  const [mediaUrl, setMediaUrl] = React.useState("");
  const [mediaUrls, setMediaUrls] = React.useState("");
  
  // UI state
  const [file, setFile] = React.useState<File | null>(null);
  const [coverFile, setCoverFile] = React.useState<File | null>(null);
  const [isLoading, setIsLoading] = React.useState<boolean>(false);
  const [error, setError] = React.useState<string>("");
  const [success, setSuccess] = React.useState<string>("");
  const [validation, setValidation] = React.useState<Record<string, string>>({});
  const [coverPreview, setCoverPreview] = React.useState<string | null>(null);
  const [filePreview, setFilePreview] = React.useState<string | null>(null);

  // Set initial date fields on client only to avoid hydration errors
  React.useEffect(() => {
    if (year === null || month === null || day === null) {
      const now = new Date();
      setYear(now.getFullYear());
      setMonth(now.getMonth() + 1);
      setDay(now.getDate());
    }
  }, [year, month, day]);

  // Fill form when editing
  React.useEffect(() => {
    if (artworkToEdit) {
      setTitle(artworkToEdit.title || "");
      setYear(artworkToEdit.year || new Date().getFullYear());
      setMonth(artworkToEdit.month || new Date().getMonth() + 1);
      setDay(artworkToEdit.day || new Date().getDate());
      setCategory(artworkToEdit.category || "poem");
      setDescription(artworkToEdit.description || "");
      setIsHidden(!!artworkToEdit.isHidden);
      
      // Cast to any for extended fields from Firebase sync
      const artwork = artworkToEdit as any;
      
      // New fields from Firebase sync
      setVersion(artwork.version || "01");
      setLanguage(artwork.language || "en");
      setLanguage1(artwork.language1 || "");
      setLanguage2(artwork.language2 || "");
      setLanguage3(artwork.language3 || "");
      setLocation1(artwork.location1 || "");
      setLocation2(artwork.location2 || "");
      setUrl1(artwork.url1 || "");
      setUrl2(artwork.url2 || "");
      setUrl3(artwork.url3 || "");
      
      // Handle tags - convert array to string
      if (Array.isArray(artwork.tags)) {
        setTags(artwork.tags.join(', '));
      } else {
        setTags(artwork.tags || "");
      }
      
      // Content
      setContent(artwork.content || "");
      
      // Category-specific fields
      setLyrics(artwork.lyrics || "");
      setChords(artwork.chords || "");
      setSoundcloudEmbedUrl(artwork.soundcloudEmbedUrl || "");
      setSoundcloudTrackUrl(artwork.soundcloudTrackUrl || "");
      setMediaType(artwork.mediaType || "text");
      setCoverImageUrl(artwork.coverImageUrl || "");
      setAudioUrl(artwork.audioUrl || "");
      setPdfUrl(artwork.pdfUrl || "");
      setMediaUrl(artwork.mediaUrl || "");
      
      // Handle mediaUrls - convert array to string
      if (Array.isArray(artwork.mediaUrls)) {
        setMediaUrls(artwork.mediaUrls.join('\n'));
      } else {
        setMediaUrls(artwork.mediaUrls || "");
      }
    } else {
      // Reset form for new item
      setTitle("");
      setYear(new Date().getFullYear());
      setMonth(new Date().getMonth() + 1);
      setDay(new Date().getDate());
      setCategory("poem");
      setDescription("");
      setContent("");
      setIsHidden(false);
      
      // Reset new fields
      setVersion("01");
      setLanguage("en");
      setLanguage1("");
      setLanguage2("");
      setLanguage3("");
      setLocation1("");
      setLocation2("");
      setTags("");
      setUrl1("");
      setUrl2("");
      setUrl3("");
      
      // Reset category-specific fields
      setLyrics("");
      setChords("");
      setSoundcloudEmbedUrl("");
      setSoundcloudTrackUrl("");
      setMediaType("text");
      setCoverImageUrl("");
      setAudioUrl("");
      setPdfUrl("");
      setMediaUrl("");
      setMediaUrls("");
      
      // Reset files
      setCoverFile(null);
      setFile(null);
      setCoverPreview(null);
      setFilePreview(null);
    }
  }, [artworkToEdit, isOpen]);

  // Preview for cover image
  React.useEffect(() => {
    if (coverFile) {
      const reader = new FileReader();
      reader.onload = e => setCoverPreview(e.target?.result as string);
      reader.readAsDataURL(coverFile);
    } else {
      setCoverPreview(null);
    }
  }, [coverFile]);

  // Preview for file (image/pdf/audio)
  React.useEffect(() => {
    if (file) {
      const reader = new FileReader();
      reader.onload = e => setFilePreview(e.target?.result as string);
      reader.readAsDataURL(file);
    } else {
      setFilePreview(null);
    }
  }, [file]);

  // Helper: which fields to show for each category
  const categoryFields: Record<string, string[]> = {
    poem: ["title", "year", "month", "day", "description", "content"],
    prosepoem: ["title", "year", "month", "day", "description", "content"],
    prose: ["title", "year", "month", "day", "description", "content", "coverImageUrl", "pdfUrl"],
    music: ["title", "year", "month", "day", "description", "lyrics", "chords", "audioUrl", "soundcloudUrl"],
    sculpture: ["title", "year", "month", "day", "description", "coverImageUrl"],
    drawing: ["title", "year", "month", "day", "description", "coverImageUrl"],
    # photography and video removed
    other: ["title", "year", "month", "day", "description", "content", "mediaUrl"],
  };
  const fieldsToShow = categoryFields[category] || [];

  // Validate fields on change
  React.useEffect(() => {
    const v: Record<string, string> = {};
    if (!title) v.title = 'Titel is verplicht.';
    if (!year || year < 1900 || year > new Date().getFullYear() + 1) v.year = 'Voer een geldig jaar in.';
    if (month && (month < 1 || month > 12)) v.month = 'Maand moet tussen 1 en 12 zijn.';
    if (day && (day < 1 || day > 31)) v.day = 'Dag moet tussen 1 en 31 zijn.';
    
    setValidation(v);
  }, [title, year, month, day, fieldsToShow, content]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError("");
    setSuccess("");
    
    try {
      // Create artwork object matching Firebase sync structure
      const newArtwork: any = {
        title: title.trim(),
        year: year || new Date().getFullYear(),
        month: month || new Date().getMonth() + 1,
        day: day || new Date().getDate(),
        category: category,
        description: description.trim(),
        isHidden: !!isHidden,
        
        // New fields from Firebase sync
        version: version.trim(),
        language: language,
        language1: language1.trim(),
        language2: language2.trim(),
        language3: language3.trim(),
        location1: location1.trim(),
        location2: location2.trim(),
        url1: url1.trim(),
        url2: url2.trim(),
        url3: url3.trim(),
        
        // Convert tags string to array
        tags: tags.trim() ? tags.split(',').map(tag => tag.trim()).filter(tag => tag) : [],
        
        // Content
        content: content.trim(),
        
        // Category-specific fields
        lyrics: lyrics.trim(),
        chords: chords.trim(),
        soundcloudEmbedUrl: soundcloudEmbedUrl.trim(),
        soundcloudTrackUrl: soundcloudTrackUrl.trim(),
        mediaType: mediaType,
        coverImageUrl: coverImageUrl.trim(),
        audioUrl: audioUrl.trim(),
        pdfUrl: pdfUrl.trim(),
        mediaUrl: mediaUrl.trim(),
        
        // Convert mediaUrls string to array
        mediaUrls: mediaUrls.trim() ? mediaUrls.split('\n').map(url => url.trim()).filter(url => url) : [],
        
        // Timestamps
        recordCreationDate: artworkToEdit && 'recordCreationDate' in artworkToEdit 
          ? artworkToEdit.recordCreationDate 
          : Date.now(),
        recordLastUpdated: Date.now(),
      };

      // Remove empty strings and convert to undefined for cleaner database
      Object.keys(newArtwork).forEach(key => {
        if (newArtwork[key] === "" || (Array.isArray(newArtwork[key]) && newArtwork[key].length === 0)) {
          delete newArtwork[key];
        }
      });

      if (artworkToEdit && 'id' in artworkToEdit) {
        // Update existing artwork
        await update(dbRef(db, `artworks/${artworkToEdit.id}`), newArtwork);
        setSuccess("Kunstwerk succesvol bijgewerkt!");
      } else {
        // Create new artwork - use timestamp as key to match Firebase sync pattern
        // Fix: Ensure month and day are never null
        const safeMonth = month || new Date().getMonth() + 1;
        const safeDay = day || new Date().getDate();
        const safeYear = year || new Date().getFullYear();
        
        const newKey = `${safeYear}${safeMonth.toString().padStart(2, '0')}${safeDay.toString().padStart(2, '0')}_${category}_${title.toLowerCase().replace(/[^a-z0-9]/g, '-')}_${language}`;
        newArtwork.id = newKey;
        await set(dbRef(db, `artworks/${newKey}`), newArtwork);
        setSuccess("Kunstwerk succesvol toegevoegd!");
      }
      
      // Close modal after short delay to show success message
      setTimeout(() => {
        onClose();
      }, 1500);
      
    } catch (err: any) {
      console.error("Opslaan error:", err);
      setError(`Fout bij opslaan: ${err.message || err.toString()}`);
    } finally {
      setIsLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <ModalBackdrop>
      <ModalContent>
        <CloseButton onClick={onClose} title="Sluiten">×</CloseButton>
        
        <FormWrapper>
          <h2 style={{ margin: 0, color: '#E07A5F', fontFamily: 'Lora, serif' }}>
            {artworkToEdit ? 'Kunstwerk Bewerken' : 'Nieuw Kunstwerk'}
          </h2>
          
          <form onSubmit={handleSubmit}>
            {/* Basic Information */}
            <SectionTitle>Basis Informatie</SectionTitle>
            
            <FieldGroup>
              <Label>Titel *</Label>
              <Input 
                value={title} 
                onChange={e => setTitle(e.target.value)} 
                placeholder="Titel van het kunstwerk"
                required 
              />
              {validation.title && <ErrorMessage>{validation.title}</ErrorMessage>}
            </FieldGroup>

            <FieldGroup>
              <Label>Categorie *</Label>
              <Select value={category} onChange={e => setCategory(e.target.value as Artwork["category"])}>
                {Object.entries(CATEGORY_LABELS).map(([key, label]) => (
                  <option key={key} value={key}>{label}</option>
                ))}
              </Select>
            </FieldGroup>

            <div style={{ display: 'flex', gap: '1rem' }}>
              <FieldGroup style={{ flex: 1 }}>
                <Label>Jaar *</Label>
                <Input 
                  type="number" 
                  value={year ?? ""} 
                  onChange={e => setYear(Number(e.target.value))} 
                  min={1900} 
                  max={new Date().getFullYear() + 1}
                  required 
                />
                {validation.year && <ErrorMessage>{validation.year}</ErrorMessage>}
              </FieldGroup>
              
              <FieldGroup style={{ flex: 1 }}>
                <Label>Maand</Label>
                <Input 
                  type="number" 
                  min={1} 
                  max={12} 
                  value={month ?? ""} 
                  onChange={e => setMonth(Number(e.target.value))} 
                />
                {validation.month && <ErrorMessage>{validation.month}</ErrorMessage>}
              </FieldGroup>
              
              <FieldGroup style={{ flex: 1 }}>
                <Label>Dag</Label>
                <Input 
                  type="number" 
                  min={1} 
                  max={31} 
                  value={day ?? ""} 
                  onChange={e => setDay(Number(e.target.value))} 
                />
                {validation.day && <ErrorMessage>{validation.day}</ErrorMessage>}
              </FieldGroup>
            </div>

            <FieldGroup>
              <Label>Beschrijving</Label>
              <Textarea 
                value={description} 
                onChange={e => setDescription(e.target.value)} 
                placeholder="Korte beschrijving van het kunstwerk"
              />
            </FieldGroup>

            {/* Metadata */}
            <SectionTitle>Metadata</SectionTitle>
            
            <div style={{ display: 'flex', gap: '1rem' }}>
              <FieldGroup style={{ flex: 1 }}>
                <Label>Versie</Label>
                <Input 
                  value={version} 
                  onChange={e => setVersion(e.target.value)} 
                  placeholder="01"
                />
              </FieldGroup>
              
              <FieldGroup style={{ flex: 1 }}>
                <Label>Taal</Label>
                <Select value={language} onChange={e => setLanguage(e.target.value)}>
                  <option value="en">Engels</option>
                  <option value="nl">Nederlands</option>
                </Select>
              </FieldGroup>
            </div>

            <FieldGroup>
              <Label>Tags (komma gescheiden)</Label>
              <Input 
                value={tags} 
                onChange={e => setTags(e.target.value)} 
                placeholder="tag1, tag2, tag3"
              />
            </FieldGroup>

            <div style={{ display: 'flex', gap: '1rem' }}>
              <FieldGroup style={{ flex: 1 }}>
                <Label>Locatie 1</Label>
                <Input 
                  value={location1} 
                  onChange={e => setLocation1(e.target.value)} 
                  placeholder="Stad"
                />
              </FieldGroup>
              
              <FieldGroup style={{ flex: 1 }}>
                <Label>Locatie 2</Label>
                <Input 
                  value={location2} 
                  onChange={e => setLocation2(e.target.value)} 
                  placeholder="Land"
                />
              </FieldGroup>
            </div>

            {/* Content */}
            {fieldsToShow.includes("content") && (
              <>
                <SectionTitle>Inhoud</SectionTitle>
                <FieldGroup>
                  <Label>Content</Label>
                  <Textarea 
                    value={content} 
                    onChange={e => setContent(e.target.value)} 
                    placeholder="Volledige inhoud van het kunstwerk"
                    style={{ minHeight: '200px' }}
                  />
                </FieldGroup>
              </>
            )}

            {/* Music-specific fields */}
            {category === 'music' && (
              <>
                <SectionTitle>Muziek</SectionTitle>
                <FieldGroup>
                  <Label>Songtekst</Label>
                  <Textarea 
                    value={lyrics} 
                    onChange={e => setLyrics(e.target.value)} 
                    placeholder="Songtekst"
                    style={{ minHeight: '150px' }}
                  />
                </FieldGroup>
                
                <FieldGroup>
                  <Label>Akkoorden</Label>
                  <Textarea 
                    value={chords} 
                    onChange={e => setChords(e.target.value)} 
                    placeholder="Akkoorden"
                  />
                </FieldGroup>
                
                <FieldGroup>
                  <Label>Audio URL</Label>
                  <Input 
                    value={audioUrl} 
                    onChange={e => setAudioUrl(e.target.value)} 
                    placeholder="Direct link naar audio bestand"
                  />
                </FieldGroup>
              </>
            )}

            {/* Media URLs */}
            <SectionTitle>Media</SectionTitle>
            
            {fieldsToShow.includes("coverImageUrl") && (
              <FieldGroup>
                <Label>Cover Afbeelding URL</Label>
                <Input 
                  value={coverImageUrl} 
                  onChange={e => setCoverImageUrl(e.target.value)} 
                  placeholder="Direct link naar cover afbeelding"
                />
              </FieldGroup>
            )}

            {fieldsToShow.includes("pdfUrl") && (
              <FieldGroup>
                <Label>PDF URL</Label>
                <Input 
                  value={pdfUrl} 
                  onChange={e => setPdfUrl(e.target.value)} 
                  placeholder="Direct link naar PDF bestand"
                />
              </FieldGroup>
            )}

            {fieldsToShow.includes("mediaUrl") && (
              <FieldGroup>
                <Label>Media URL</Label>
                <Input 
                  value={mediaUrl} 
                  onChange={e => setMediaUrl(e.target.value)} 
                  placeholder="Direct link naar media bestand"
                />
              </FieldGroup>
            )}

            <FieldGroup>
              <Label>Media URLs (één per regel)</Label>
              <Textarea 
                value={mediaUrls} 
                onChange={e => setMediaUrls(e.target.value)} 
                placeholder="https://example.com/file1.jpg&#10;https://example.com/file2.mp3"
              />
            </FieldGroup>

            {/* URLs */}
            <SectionTitle>Extra URLs</SectionTitle>
            
            <FieldGroup>
              <Label>URL 1</Label>
              <Input 
                value={url1} 
                onChange={e => setUrl1(e.target.value)} 
                placeholder="Extra URL"
              />
            </FieldGroup>
            
            <FieldGroup>
              <Label>URL 2</Label>
              <Input 
                value={url2} 
                onChange={e => setUrl2(e.target.value)} 
                placeholder="Extra URL"
              />
            </FieldGroup>
            
            <FieldGroup>
              <Label>URL 3</Label>
              <Input 
                value={url3} 
                onChange={e => setUrl3(e.target.value)} 
                placeholder="Extra URL"
              />
            </FieldGroup>

            {/* Settings */}
            <SectionTitle>Instellingen</SectionTitle>
            
            <FieldGroup>
              <Label>
                <input 
                  type="checkbox" 
                  checked={isHidden} 
                  onChange={e => setIsHidden(e.target.checked)} 
                  style={{ marginRight: '0.5rem' }}
                />
                Verborgen (niet zichtbaar op de website)
              </Label>
            </FieldGroup>

            <Button 
              type="submit" 
              disabled={isLoading || Object.keys(validation).length > 0}
            >
              {isLoading ? "Bezig..." : artworkToEdit ? "Bijwerken" : "Aanmaken"}
            </Button>
            
            {error && <ErrorMessage>{error}</ErrorMessage>}
            {success && <SuccessMessage>{success}</SuccessMessage>}
          </form>
        </FormWrapper>
      </ModalContent>
    </ModalBackdrop>
  );
};

export default AdminModal;

// If you get a build error like EPERM: operation not permitted, open '.next/trace',
// try closing all dev servers, deleting the .next folder, and running build again.
